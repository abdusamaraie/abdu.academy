# PRD Generator Rule

## Purpose
This rule helps you create comprehensive Product Requirements Documents (PRDs) by providing a structured template that you can fill with your project-specific information.

## How to Use This Rule

1. **Fill in the template sections** with your project details
2. **Customize the content** based on your specific app idea and requirements
3. **Generate the PRD** using the structured format below
4. **Save the PRD** in your project's documentation folder

## PRD Template Structure

### 1. Project Overview
```markdown
# Product Requirements Document (PRD)
## [Your App Name]

### Version: [X.X]
### Date: [YYYY-MM-DD]
### Author: [Your Name/Team]

## Executive Summary
[Brief 2-3 sentence overview of what your app does and its core value proposition]

## Product Vision
[Describe the long-term vision and goals for your product]

## Target Audience
- **Primary Users:** [Who are your main users?]
- **Secondary Users:** [Any secondary user groups?]
- **User Personas:** [Brief description of key user types]
```

### 2. Problem Statement & Solution
```markdown
## Problem Statement
[Describe the problem(s) your app solves]

## Solution Overview
[How does your app solve these problems?]

## Key Value Propositions
- [Value proposition 1]
- [Value proposition 2]
- [Value proposition 3]
```

### 3. MVP Features
```markdown
## Minimum Viable Product (MVP)

### Core Features
- [ ] **Feature 1:** [Description]
  - User Story: [As a user, I want to... so that...]
  - Acceptance Criteria: [Specific criteria for completion]
  - Priority: [High/Medium/Low]

- [ ] **Feature 2:** [Description]
  - User Story: [As a user, I want to... so that...]
  - Acceptance Criteria: [Specific criteria for completion]
  - Priority: [High/Medium/Low]

### Essential User Flows
1. **User Registration/Onboarding**
   - [Flow description]
   - [Key steps]

2. **Core Functionality Flow**
   - [Flow description]
   - [Key steps]

3. **User Management**
   - [Flow description]
   - [Key steps]
```

### 4. Technical Specifications
```markdown
## Technical Stack

### Frontend
- **Framework:** [Your chosen framework]
- **Language:** [TypeScript/JavaScript/etc.]
- **Styling:** [CSS framework/tool]
- **State Management:** [Redux/Zustand/etc.]
- **UI Library:** [Component library if any]

### Backend
- **Framework:** [Your chosen backend framework]
- **Language:** [Node.js/Python/etc.]
- **API:** [REST/GraphQL/etc.]
- **Authentication:** [Auth method]

### Database
- **Type:** [SQL/NoSQL]
- **Database:** [Specific database name]
- **ORM/ODM:** [If applicable]

### Infrastructure & Tools
- **Hosting:** [Platform choice]
- **CI/CD:** [Pipeline tool]
- **Monitoring:** [Monitoring solution]
- **Testing:** [Testing framework]
- **Version Control:** [Git workflow]

### Third-Party Integrations
- [Integration 1]: [Purpose]
- [Integration 2]: [Purpose]
- [Integration 3]: [Purpose]
```

### 5. User Experience & Design
```markdown
## User Experience Requirements

### Design Principles
- [Principle 1]
- [Principle 2]
- [Principle 3]

### User Interface Guidelines
- **Design System:** [Framework/approach]
- **Responsive Design:** [Mobile-first/Desktop-first]
- **Accessibility:** [WCAG compliance level]
- **Brand Guidelines:** [Color scheme, typography, etc.]

### Key Screens/Pages
1. **Homepage/Dashboard**
   - [Purpose and key elements]

2. **User Profile**
   - [Purpose and key elements]

3. **Core Feature Page**
   - [Purpose and key elements]

4. **Settings/Configuration**
   - [Purpose and key elements]
```

### 6. Functional Requirements
```markdown
## Functional Requirements

### Authentication & Authorization
- [ ] User registration
- [ ] User login/logout
- [ ] Password reset
- [ ] Role-based access control
- [ ] Session management

### Data Management
- [ ] CRUD operations for [entity 1]
- [ ] CRUD operations for [entity 2]
- [ ] Data validation
- [ ] File uploads
- [ ] Data export/import

### User Features
- [ ] [Specific feature 1]
- [ ] [Specific feature 2]
- [ ] [Specific feature 3]

### Admin Features
- [ ] User management
- [ ] Content management
- [ ] Analytics dashboard
- [ ] System configuration
```

### 7. Non-Functional Requirements
```markdown
## Non-Functional Requirements

### Performance
- **Page Load Time:** [Target time]
- **API Response Time:** [Target time]
- **Concurrent Users:** [Expected load]
- **Scalability:** [Growth expectations]

### Security
- **Data Encryption:** [Encryption standards]
- **Authentication:** [Security requirements]
- **Data Privacy:** [Compliance needs]
- **API Security:** [Rate limiting, etc.]

### Reliability
- **Uptime:** [Target percentage]
- **Error Handling:** [Error management approach]
- **Backup Strategy:** [Data backup requirements]
- **Disaster Recovery:** [Recovery procedures]

### Usability
- **Browser Support:** [Supported browsers]
- **Device Support:** [Mobile/tablet/desktop]
- **Accessibility:** [WCAG compliance]
- **Internationalization:** [Multi-language support]
```

### 8. Success Metrics
```markdown
## Success Metrics & KPIs

### User Engagement
- [ ] User registration rate
- [ ] Daily/Monthly active users
- [ ] Session duration
- [ ] Feature adoption rate

### Business Metrics
- [ ] Conversion rate
- [ ] User retention rate
- [ ] Customer satisfaction score
- [ ] Revenue metrics (if applicable)

### Technical Metrics
- [ ] System uptime
- [ ] Page load performance
- [ ] Error rates
- [ ] API response times
```

### 9. Timeline & Milestones
```markdown
## Development Timeline

### Phase 1: Foundation (Weeks 1-2)
- [ ] Project setup and configuration
- [ ] Basic architecture implementation
- [ ] Database schema design
- [ ] Authentication system

### Phase 2: Core Features (Weeks 3-6)
- [ ] Implement core functionality
- [ ] User interface development
- [ ] API development
- [ ] Basic testing

### Phase 3: Polish & Launch (Weeks 7-8)
- [ ] UI/UX refinements
- [ ] Comprehensive testing
- [ ] Performance optimization
- [ ] Deployment preparation

### Milestones
- **MVP Complete:** [Date]
- **Beta Testing:** [Date]
- **Public Launch:** [Date]
```

### 10. Risk Assessment
```markdown
## Risk Assessment

### Technical Risks
- **Risk 1:** [Description]
  - **Impact:** [High/Medium/Low]
  - **Mitigation:** [Strategy]

- **Risk 2:** [Description]
  - **Impact:** [High/Medium/Low]
  - **Mitigation:** [Strategy]

### Business Risks
- **Risk 1:** [Description]
  - **Impact:** [High/Medium/Low]
  - **Mitigation:** [Strategy]

### Resource Risks
- **Risk 1:** [Description]
  - **Impact:** [High/Medium/Low]
  - **Mitigation:** [Strategy]
```

### 11. Future Enhancements
```markdown
## Future Enhancements (Post-MVP)

### Phase 2 Features
- [ ] [Feature description]
- [ ] [Feature description]
- [ ] [Feature description]

### Phase 3 Features
- [ ] [Feature description]
- [ ] [Feature description]
- [ ] [Feature description]

### Long-term Vision
[Describe future roadmap and expansion plans]
```

## Usage Instructions

### Step 1: Customize the Template
1. Replace all placeholder text in `[brackets]` with your project-specific information
2. Add or remove sections based on your project needs
3. Adjust the structure to match your development approach

### Step 2: Fill in Project Details
- **App Idea:** Describe your core concept and value proposition
- **MVP Features:** List only the essential features for your first release
- **Tech Stack:** Specify your chosen technologies and tools
- **Timeline:** Set realistic milestones based on your team and resources

### Step 3: Generate Documentation
1. Create a new markdown file (e.g., `PRD.md`)
2. Copy the template structure
3. Fill in all sections with your project details
4. Save in your project's documentation folder

### Step 4: Review and Iterate
- Review the PRD with stakeholders
- Update based on feedback
- Keep the document updated as requirements evolve

## Best Practices

### Writing Effective PRDs
- **Be Specific:** Use clear, measurable requirements
- **User-Centric:** Focus on user needs and value
- **Realistic:** Set achievable goals and timelines
- **Comprehensive:** Cover all aspects of the product
- **Maintainable:** Keep the document updated

### Collaboration Tips
- Share the PRD with all team members
- Use version control for PRD changes
- Regular reviews and updates
- Link PRD to project management tools

### Integration with Development
- Use PRD as the source of truth for requirements
- Link PRD sections to development tasks
- Track progress against PRD milestones
- Update PRD based on development learnings

This rule provides a comprehensive framework for creating detailed PRDs that can guide your development process and ensure all stakeholders have a clear understanding of the product vision and requirements.
description:
globs:
alwaysApply: true
---
