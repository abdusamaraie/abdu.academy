# Figma MCP Integration Guidelines

This rule provides project-level guidance for consistent output when working with Figma designs through the MCP server integration.

## Asset Management

### Figma Dev Mode MCP Server Assets
- **IMPORTANT**: If the Figma Dev Mode MCP Server returns a localhost source for an image or SVG, use that image or SVG source directly
- **IMPORTANT**: DO NOT import/add new icon packages, all the assets should be in the Figma payload
- **IMPORTANT**: Do NOT use or create placeholders if a localhost source is provided
- Always use the exact asset URLs provided by the MCP server for consistency

### Asset File Organization
- Store Figma-generated assets in `src/assets/figma/` directory
- Maintain the original file structure from Figma when possible
- Use descriptive filenames that match Figma layer names
- Group assets by component or feature when appropriate

## Layout Primitives

### Preferred Layout Components
- Use Flexbox and Grid for layout (TailwindCSS utilities)
- Prefer `flex` and `grid` over absolute positioning
- Use semantic HTML elements (`main`, `section`, `article`, `aside`)
- Implement responsive design with mobile-first approach
- Use consistent spacing scale (TailwindCSS spacing utilities)

### Container Patterns
- Use `max-w-*` utilities for content width constraints
- Implement consistent padding/margin patterns
- Prefer `container` class for main content areas
- Use `mx-auto` for horizontal centering

## File Organization

### Component Structure
```
src/
├── components/
│   ├── ui/           # Reusable UI components from Figma
│   ├── layout/       # Layout components
│   └── features/     # Feature-specific components
├── assets/
│   ├── figma/        # Figma-generated assets
│   ├── icons/        # Icon assets
│   └── images/       # Image assets
└── styles/
    └── components/   # Component-specific styles
```

### Naming Conventions
- Use PascalCase for component files: `Button.tsx`, `Card.tsx`
- Use camelCase for utility files: `useTheme.ts`, `formatDate.ts`
- Use kebab-case for asset files: `hero-image.png`, `icon-home.svg`
- Match Figma layer names when possible for consistency

## Design System Integration

### Color Usage
- **DO NOT hardcode colors** - use TailwindCSS color classes
- Reference Figma color tokens through CSS custom properties
- Use semantic color names (primary, secondary, accent)
- Implement dark mode support for all color usage

### Typography
- **DO NOT hardcode font sizes** - use TailwindCSS text utilities
- Use consistent font weight scale (font-light, font-normal, font-medium, font-bold)
- Implement responsive typography with appropriate breakpoints
- Match Figma text styles exactly

### Spacing
- **DO NOT hardcode spacing values** - use TailwindCSS spacing utilities
- Follow consistent spacing scale (4px, 8px, 12px, 16px, 24px, 32px, 48px, 64px)
- Use semantic spacing classes (p-4, m-6, gap-8)
- Maintain visual hierarchy through consistent spacing

## Component Implementation

### Figma Component Mapping
- Create React components that directly correspond to Figma components
- Maintain the exact visual hierarchy from Figma designs
- Use the same component names as Figma layers when appropriate
- Implement all states (hover, active, disabled, focus) as shown in Figma

### Props and Variants
- Implement component variants to match Figma component properties
- Use TypeScript interfaces for component props
- Make components flexible enough to handle different content lengths
- Maintain design consistency across all variants

## Code Quality Standards

### Accessibility
- Implement proper ARIA attributes for interactive elements
- Ensure keyboard navigation support
- Maintain sufficient color contrast ratios
- Use semantic HTML elements

### Performance
- Optimize images and SVGs from Figma
- Use lazy loading for non-critical assets
- Implement proper loading states
- Minimize bundle size impact

### Responsive Design
- Implement mobile-first responsive design
- Test across all breakpoints (sm, md, lg, xl, 2xl)
- Ensure touch-friendly interaction areas
- Maintain visual hierarchy across screen sizes

## Integration Workflow

### When Using Figma MCP
1. Extract design tokens and assets from Figma
2. Create or update components to match Figma designs exactly
3. Implement responsive behavior based on design specifications
4. Test components across different screen sizes
5. Ensure accessibility compliance
6. Update component documentation

### Version Control
- Commit Figma-generated assets separately from code changes
- Use descriptive commit messages for design updates
- Maintain asset versioning when Figma designs change
- Document any deviations from Figma designs with reasoning

## Common Pitfalls to Avoid

### What NOT to Hardcode
- Colors (use TailwindCSS classes or CSS custom properties)
- Font sizes (use TailwindCSS text utilities)
- Spacing values (use TailwindCSS spacing utilities)
- Border radius values (use TailwindCSS rounded utilities)
- Shadow values (use TailwindCSS shadow utilities)
- Animation durations (use TailwindCSS transition utilities)

### Asset Management Mistakes
- Creating placeholder images when Figma assets are available
- Importing external icon libraries when Figma provides icons
- Modifying Figma-generated assets without design approval
- Using incorrect asset URLs or file paths

### Layout Mistakes
- Using absolute positioning when flexbox/grid would work
- Hardcoding dimensions instead of using responsive utilities
- Ignoring mobile-first responsive design principles
- Creating inconsistent spacing patterns

## Quality Assurance

### Design Fidelity Checklist
- [ ] Component matches Figma design pixel-perfectly
- [ ] All states (hover, active, disabled) are implemented
- [ ] Responsive behavior matches design specifications
- [ ] Typography and spacing are consistent
- [ ] Colors match Figma color tokens
- [ ] Assets are properly optimized and loaded
- [ ] Accessibility requirements are met
- [ ] Performance impact is minimal

### Code Review Guidelines
- Verify no hardcoded values are used
- Check that all Figma assets are properly utilized
- Ensure consistent naming conventions
- Validate responsive design implementation
- Confirm accessibility compliance
- Review component reusability and maintainability 
