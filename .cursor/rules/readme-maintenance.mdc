# README Maintenance Rule

This rule defines when and how to automatically update the README.md file to keep it current with project changes.

## When to Update README.md

### Major Project Changes (Always Update)
- New features or components added
- Technology stack changes (new frameworks, libraries, tools)
- Project structure modifications
- Environment setup changes
- Deployment process updates
- API integrations added/removed
- Database schema changes
- Authentication system changes

### Minor Updates (Consider Updating)
- Bug fixes that affect user experience
- Performance improvements
- Code refactoring that changes file structure
- New dependencies added
- Configuration changes

## README Structure to Maintain

### Required Sections
1. **Project Title & Description** - Clear, concise project overview
2. **Tech Stack** - Current technologies, frameworks, and tools
3. **Setup Instructions** - Step-by-step environment setup
4. **Development Commands** - Common npm/yarn commands
5. **Project Structure** - Key directories and their purposes
6. **Environment Variables** - Required .env variables
7. **Deployment** - How to deploy the project

### Optional Sections (Add When Relevant)
- **Features** - Key functionality list
- **API Documentation** - If the project has APIs
- **Contributing Guidelines** - For team projects
- **Troubleshooting** - Common issues and solutions
- **Performance Notes** - Optimization tips
- **Security Considerations** - Important security notes

## Update Process

### Before Making Changes
1. **Assess Impact**: Determine if the change affects setup, deployment, or usage
2. **Plan Updates**: Identify which README sections need updates
3. **Backup Current**: Note current README content for reference

### During Implementation
1. **Update Code First**: Implement the actual changes
2. **Test Changes**: Ensure everything works as documented
3. **Update README**: Modify relevant sections to reflect changes

### After Implementation
1. **Verify Accuracy**: Ensure README matches actual implementation
2. **Test Instructions**: Follow README instructions to verify they work
3. **Update Examples**: Ensure code examples are current

## Content Guidelines

### Writing Style
- Use clear, concise language
- Write in present tense
- Use active voice
- Include code examples when helpful
- Use proper markdown formatting

### Code Examples
```markdown
# Good Example
```bash
npm install
npm run dev
```

# Bad Example
```bash
npm install  # install dependencies
npm run dev  # start development server
```
```

### File Structure Documentation
```markdown
# Good Example
```
src/
├── components/     # React components
├── pages/         # Page components
├── contexts/      # React contexts
├── utils/         # Utility functions
└── styles/        # CSS and styling files
```

# Bad Example
```
src/
├── components/
├── pages/
└── ...
```
```

## Implementation Notes

When the AI assistant makes significant project changes:

1. **Automatic Assessment**: Evaluate if README needs updates
2. **Proactive Updates**: Update README before or during implementation
3. **Accuracy Check**: Ensure documentation matches implementation
4. **User Experience**: Make sure new users can follow the README successfully
5. **Maintenance**: Keep README current with ongoing development

## Examples of README Updates

### Adding New Feature
```markdown
# Before
## Features
- User authentication
- Dashboard

# After
## Features
- User authentication
- Dashboard
- Real-time notifications
- File upload system
```

### Technology Stack Change
```markdown
# Before
## Tech Stack
- React
- Vite
- Firebase

# After
## Tech Stack
- React 18
- Vite 5
- Firebase
- Tailwind CSS
- TypeScript
```

This rule ensures the README.md file remains a reliable, up-to-date resource for anyone working with the project.
